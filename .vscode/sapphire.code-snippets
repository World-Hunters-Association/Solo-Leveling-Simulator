{
	"Create a command structure": {
		"prefix": "command",
		"body": [
			"import { SlashCommandBuilder } from '@discordjs/builders';",
			"import { ApplyOptions } from '@sapphire/decorators';",
			"import {",
			"    ApplicationCommandRegistry, Command, CommandOptions, RegisterBehavior",
			"} from '@sapphire/framework';",
			"",
			"@ApplyOptions<CommandOptions>({",
			"    name: '${TM_FILENAME_BASE/(\\w*)/${1:/downcase}/}',",
			"    preconditions: ['${1|Defer,EphemeralDefer|}'],",
			"    requiredClientPermissions: [BigInt(277025770560)],",
			"    requiredUserPermissions: ['USE_EXTERNAL_EMOJIS'],",
			"})",
			"export default class UserCommand extends Command {",
			"    public override registerApplicationCommands(registry: ApplicationCommandRegistry) {",
			"        $0",
			"    }",
			"",
			"    public async chatInputRun(interaction: Command.ChatInputInteraction<'cached'>) {",
			"",
			"    }",
			"}",
			"",
			"declare module '@sapphire/framework' {",
			"    interface CommandStore {",
			"        get(name: '${TM_FILENAME_BASE/(\\w*)/${1:/downcase}/}'): UserCommand;",
			"    }",
			"}",
			""
		],
		"description": "Create a command structure"
	},
	"Create listener structure": {
		"prefix": "listener",
		"body": [
			"import { Listener } from '@sapphire/framework';",
			"",
			"import type { } from 'discord.js';",
			"",
			"export default class UserListener extends Listener {",
			"    public constructor(context: Listener.Context, options: Listener.Options) {",
			"        super(context, {",
			"            ...options,",
			"            name: '${TM_FILENAME_BASE/^(\\w*)$/${1:/capitalize}/}'",
			"        });",
			"    }",
			"",
			"    public async run() {",
			"        $0",
			"    }",
			"}",
			"",
			"declare module '@sapphire/framework' {",
			"    interface ListenerStore {",
			"        get(name: '${TM_FILENAME_BASE/(\\w*)/${1:/capitalize}/}'): UserListener;",
			"    }",
			"}",
			""
		],
		"description": "Create listener structure"
	},
	"Create precondition structure": {
		"prefix": "precondition",
		"body": [
			"import { PieceContext, Precondition } from '@sapphire/framework';",
			"",
			"import type { CommandInteraction } from 'discord.js';",
			"",
			"export default class UserPrecondition extends Precondition {",
			"    public constructor(context: PieceContext, options: Precondition.Options) {",
			"        super(context, {",
			"            ...options,",
			"            name: '${TM_FILENAME_BASE/^(\\w*)$/${1:/capitalize}/}'",
			"        });",
			"    }",
			"",
			"    public async chatInputRun(interaction: CommandInteraction) {",
			"        $0",
			"    }",
			"}",
			"",
			"declare module '@sapphire/framework' {",
			"    interface Preconditions {",
			"        ${TM_FILENAME_BASE/^(\\w*)$/${1:/capitalize}/}: never;",
			"    }",
			"",
			"    interface PreconditionStore {",
			"        get(name: '${TM_FILENAME_BASE/(\\w*)/${1:/capitalize}/}'): UserPrecondition;",
			"    }",
			"}",
			""
		],
		"description": "Create precondition structure"
	},
	"Register a Slash Command": {
		"prefix": "slashBuilder",
		"body": [
			"const builder = new SlashCommandBuilder();",
			"",
			"this.container.functions.setNameAndDescriptions(builder, ['common:${TM_FILENAME_BASE}', 'validation:help.desccriptions.commands.${TM_FILENAME_BASE/(\\w*)/${1:/upcase}/}']);",
			"",
			"registry.registerChatInputCommand(builder, {",
			"    idHints: [''],",
			"    behaviorWhenNotIdentical: RegisterBehavior.Overwrite",
			"});"
		],
		"description": "Register a Slash Command"
	},
	"Register a Context Menu Command": {
		"prefix": "contextBuilder",
		"body": [
			"registry.registerContextMenuCommand(",
			"    new ContextMenuCommandBuilder()",
			"        .setName(this.name)",
			"        .setType(${1|2,3|}),",
			"    {",
			"        idHints: [''],",
			"        behaviorWhenNotIdentical: RegisterBehavior.Overwrite",
			"    });"
		],
		"description": "Register a Context Menu Command"
	},
	"Create interaction handler structure": {
		"prefix": "interaction handler",
		"body": [
			"import { ApplyOptions } from '@sapphire/decorators';",
			"import { InteractionHandler, InteractionHandlerOptions, InteractionHandlerTypes } from '@sapphire/framework';",
			"",
			"import type { ${1|Autocomplete,Button,MessageComponent,SelectMenu,ModalSubmit|}Interaction } from 'discord.js';",
			"",
			"@ApplyOptions<InteractionHandlerOptions>({",
			"    interactionHandlerType: InteractionHandlerTypes.${1|Autocomplete,Button,MessageComponent,SelectMenu,ModalSubmit|}",
			"})",
			"export class UserInteractionHandler extends InteractionHandler {",
			"    public async parse(interaction: ${1|Autocomplete,Button,MessageComponent,SelectMenu,ModalSubmit|}Interaction) {",
			"        return this.some();$0",
			"    }",
			"",
			"    public async run(interaction: ${1|Autocomplete,Button,MessageComponent,SelectMenu,ModalSubmit|}Interaction) {",
			"",
			"    }",
			"}",
			"",
			"declare module '@sapphire/framework' {",
			"    interface InteractionHandlerStore {",
			"        get(name: '$TM_FILENAME_BASE'): UserInteractionHandler;",
			"    }",
			"}",
			""
		],
		"description": "Create interaction handler structure"
	}
}
